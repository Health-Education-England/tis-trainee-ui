import { Declaration, Work } from "../models/FormRPartB";

export const CCT_DECLARATION =
  "I have been appointed to a programme leading to award of CCT";

export const MEDICAL_CURRICULUM = "MEDICAL_CURRICULUM";

export const YES_NO_OPTIONS = [
  { label: "Yes", value: "true" },
  { label: "No", value: "false" }
];

export const MFA_OPTIONS = [
  {
    label: `generated by my Authenticator App
  (recommended)`,
    value: "TOTP"
  },
  {
    label: "sent by SMS to my phone",
    value: "SMS"
  }
];

export const COJ_EPOCH = new Date(
  process.env.NEXT_PUBLIC_CONDITIONS_OF_JOINING_EPOCH as string
);

export const COJ_DECLARATIONS = [
  {
    id: "isDeclareProvisional",
    label:
      "I understand that programme and post allocations are provisional and subject to change until confirmed by HEE/NES/HEIW/NIMDTA and/or my employing organisation."
  },
  {
    id: "isDeclareSatisfy",
    label:
      "I understand that I will need to satisfy all requirements of the programme and curriculum to enable satisfactory sign off, and that this may require a specific time commitment."
  },
  {
    id: "isDeclareProvide",
    label:
      "I will obtain and provide my training programme and HEE/NES/HEIW/NIMDTA with a professional email address."
  },
  {
    id: "isDeclareInform",
    label:
      "I will inform my training programme and HEE/NES/HEIW/NIMDTA of any change of my personal contact details and/or personal circumstances that may affect my training programme arrangements."
  },
  {
    id: "isDeclareUpToDate",
    label:
      "I will keep myself up to date with the latest information available via HEE/NES/HEIW/NIMDTA as well as via the relevant educational and regulatory websites."
  },
  {
    id: "isDeclareAttend",
    label:
      "I will attend the minimum number of formal teaching days as required by my training programme."
  },
  {
    id: "isDeclareEngage",
    label:
      "Where applicable, I will fully engage with immigration and employer requirements relating to skilled worker visas (formerly Tier 2 and Tier 4 UK visas)."
  }
];

export const FORMR_PARTA_DECLARATIONS = [
  CCT_DECLARATION,
  "I will be seeking specialist registration by application for a CESR",
  "I will be seeking specialist registration by application for a CESR CP",
  "I will be seeking specialist registration by application for a CEGPR",
  "I will be seeking specialist registration by application for a CEGPR CP",
  "I am a CORE trainee, not yet eligible for CCT"
];

export const FORMR_PARTB_ACCEPTANCE =
  "This form is a true and accurate declaration at this point in time and will immediately notify the Deanery/HEE local team and my employer if I am aware of any changes to the information provided in this form.";

export const FORMR_PARTB_CONSENT =
  "I give permission for my past and present ARCP/RITA portfolios and / or appraisal documentation to be viewed by my Responsible Officer and any appropriate person nominated by the Responsible Officer. Additionally if my Responsible Officer or Designated Body changes during my training period, I give permission for my current Responsible Officer to share this information with my new Responsible Officer for the purposes of Revalidation.";

export const COVID_RESULT_DECLARATIONS = [
  "Below expectations for stage of training - needs further development",
  "Satisfactory progress meeting expectations for stage of training but some required competencies not met due to COVID 19",
  "Satisfactory progress for stage of training and required competencies met"
];

export const NEED_DISCUSSION_WITH_SUPERVISOR =
  "I would like to have discussion about my training or current situation with my supervisor";

export const NEED_DISCUSSION_WITH_SOMEONE =
  "I have concerns with my training and / or wellbeing at the moment and would like to discuss with someone";

export const IMMIGRATION_STATUS_OTHER_TISIDS = ["12", "13"];

export const CHECK_PHONE_REGEX = /^\+?(?:\d\s?){10,15}$/;

export const CHECK_WHOLE_TIME_EQUIVALENT_REGEX =
  /^((0\.[1-9])?|(0\.(\d[1-9]|[1-9]\d))|1(\.0{1,2})?)$/;

export const CHECK_POSTCODE_REGEX = /[A-Z]{1,2}\d{1,2}[A-Z]?\s?\d[A-Z]{2}/i;

export const GOLD_GUIDE_VERSION_REGEX = /^GG(\d+)$/;

export const VALUE_NOT_GIVEN = "Value not given";

export const NEW_WORK: Work = {
  typeOfWork: "",
  startDate: "",
  endDate: "",
  trainingPost: "",
  site: "",
  siteLocation: "",
  siteKnownAs: ""
};

export const NEW_DECLARATION: Declaration = {
  declarationType: undefined,
  dateOfEntry: undefined,
  title: "",
  locationOfEntry: ""
};

export const dialogBoxWarnings = {
  formSubMsg:
    "Please think carefully before submitting as the current process for deleting or re-submitting a new form isn't straightforward. You can save a draft copy if needed. But if you are ready to submit then please click OK."
};

export type PanelKeys = {
  placements: string;
  programmeMemberships: string;
  site: string;
  siteLocation: string;
  siteKnownAs: string;
  startDate: string;
  endDate: string;
  wholeTimeEquivalent: string;
  specialty: string;
  grade: string;
  placementType: string;
  employingBody: string;
  trainingBody: string;
  programmeName: string;
  programmeNumber: string;
  managingDeanery: string;
  programmeMembershipType: string;
  curricula: string;
  conditionsOfJoining: string;
};

export const PANEL_KEYS: any = {
  placements: "Placements",
  programmeMemberships: "Programmes",
  site: "Site",
  siteLocation: "Site Location",
  siteKnownAs: "Site Known As",
  startDate: "Starts",
  endDate: "Ends",
  wholeTimeEquivalent: "Whole Time Equivalent",
  specialty: "Specialty",
  grade: "Grade",
  placementType: "Placement Type",
  employingBody: "Employing Body",
  trainingBody: "Training Body",
  programmeName: "Programme Name",
  programmeNumber: "Programme Number",
  managingDeanery: "Owner",
  programmeMembershipType: "Type",
  curricula: "Curricula",
  conditionsOfJoining: "Conditions of Joining"
};

export const toastErrText = {
  fetchFeatureFlags:
    "Couldn't load some of your new form data (feature flags).",
  fetchForms: " Couldn't load your list of saved forms.",
  fetchReference:
    "Couldn't fetch the data to pre-populate your new form (reference data).",
  loadSavedFormA: "Couldn't load your saved Form R (Part A).",
  loadSavedFormB: "Couldn't load your saved Form R (Part B).",
  saveFormA: "Couldn't save your Form R (Part A).",
  saveFormB: "Couldn't save your Form R (Part B).",
  updateFormA: "Couldn't update your Form R (Part A).",
  updateFormB: "Couldn't update your Form R (Part B).",
  fetchTraineeProfileData:
    "Couldn't load your personal details (profile data).",
  updateUserAttributes:
    "Couldn't update your user information (user attributes).",
  verifyPhone: "Couldn't send you an SMS code to sign in (verify phone).",
  verifyUserAttributeSubmit:
    "verify your identification with that code (user attributes).",
  setPreferredMfa:
    "Couldn't set your preferred MFA method and log in (user attributes).",
  updateTotpCode:
    "Couldn't continue. MFA set-up session has expired. Please refresh the page and try again.",
  verifyTotp:
    "Couldn't verify your identification with that Authentication code.",
  signCoj: "Couldn't sign your Conditions of Joining."
};

export const toastSuccessText = {
  saveFormA: "Your Form R (Part A) has been saved.",
  saveFormB: "Your Form R (Part B) has been saved.",
  updateFormA: "Your Form R (Part A) has been updated.",
  updateFormB: "Your Form R (Part B) has been updated.",
  submitFormA: "Your Form R (Part A) has been submitted.",
  submitFormB: "Your Form R (Part B) has been submitted.",
  verifyPhone:
    "Your phone has been verified. An SMS code from HEE should arrive soon",
  getPreferredMfaSms:
    "SMS MFA is now set up. When prompted, provide a new 6-digit code (sent to your phone) when you next log in.",
  getPreferredMfaTotp:
    "Authenticator MFA is now set up. When prompted, provide a new 6-digit code from your app when you next log in.",
  signCoj: "Your Conditions of Joining has been signed."
};

export const supportCatOptions = [
  { value: "Authenticator", label: "Authenticator" },
  { value: "Conditions of Joining", label: "Conditions of Joining" },
  { value: "Data Quality", label: "Data Quality" },
  { value: "Digital Staff Passport", label: "Digital Staff Passport" },
  { value: "FormR", label: "FormR" },
  { value: "Login", label: "Login" },
  { value: "Personal data", label: "Personal data" },
  { value: "Placement data", label: "Placement data" },
  { value: "Programme data", label: "Programme data" },
  { value: "Sign up", label: "Sign up" },
  { value: "SMS", label: "SMS" }
];

type localOfficeContactsProps = {
  [key: string]: string;
};

export const localOfficeContacts: localOfficeContactsProps = {
  "Health Education England East Midlands": "TIS.EM@hee.nhs.uk",
  "Health Education England East of England": "TIS.EOE@hee.nhs.uk",
  "Health Education England Kent, Surrey and Sussex": "PGMDE support portal",
  "Health Education England North Central and East London":
    "PGMDE support portal",
  "Health Education England North East": "tissupport.north@hee.nhs.uk",
  "Health Education England North West": "tissupport.north@hee.nhs.uk",
  "Health Education England North West London": "PGMDE support portal",
  "Health Education England South London": "PGMDE support portal",
  "Health Education England South West": "TISQueries.sw@hee.nhs.uk",
  "Health Education England Thames Valley": "Formr.tv@hee.nhs.uk",
  "Health Education England Wessex": "Formr.wx@hee.nhs.uk",
  "Health Education England West Midlands": "TIS.WM@hee.nhs.uk",
  "Health Education England Yorkshire and the Humber":
    "tissupport.north@hee.nhs.uk"
};
