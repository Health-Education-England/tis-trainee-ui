name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  dockerize:
    name: Dockerize
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-pre-prod:
    needs: [dockerize]
    environment: pre-prod
    name: Deploy to pre-production environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition-pre-prod.json
          container-name: trainee-ui
          image: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: trainee-ui
          cluster: trainee-preprod
          wait-for-service-stability: true

  cypress-e2e:
    needs: [deploy-pre-prod]
    name: Run Cypress E2E tests
    runs-on: ubuntu-latest
    container: cypress/browsers:latest

    steps:
      - uses: actions/checkout@v2

      - name: Cypress run
        uses: cypress-io/github-action@v2
        continue-on-error: true
        env:
          CYPRESS_baseUrl: https://trainee.tis.nhs.uk
          CYPRESS_password: ${{ secrets.E2E_TEST_PASS }}
          CYPRESS_username: ${{ secrets.E2E_TEST_USER }}
        with:
          browser: chrome

      - name: Merge test results into one
        run: npm run report:merge

      - name: Generate HTML report
        run: npm run report:generate

      - name: Create report artifact
        uses: actions/upload-artifact@v2
        with:
          name: cypress-reports
          path: cypress/reports

      - name: Create screenshot artifact
        uses: actions/upload-artifact@v2
        # No screenshots generated if tests pass.
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Create video artifact
        uses: actions/upload-artifact@v2
        # Test run video was always captured, so this action uses "always()" condition
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos

  backup-artifacts:
    needs: [cypress-e2e]
    name: Backup build artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          path: build-artifacts

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Backup build artifacts
        run: |
          workflow=$(echo ${{ github.workflow }} | sed -e 's/\W/-/g' -e 's/\(.*\)/\L\1/')
          aws s3 sync build-artifacts s3://tis-build-artifacts/${{ github.event.repository.name }}/$workflow/${{ github.run_number }}

  send-slack:
    needs: [backup-artifacts]
    name: Send notification to Slack
    runs-on: ubuntu-latest

    steps:
      - name: Get workflow
        run: |
          echo "workflow=$(echo ${{ github.workflow }} | sed -e 's/\W/-/g' -e 's/\(.*\)/\L\1/')" >> $GITHUB_ENV
      - name: Slack Notify
        uses: rtCamp/action-slack-notify@v2.1.2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: TIS-Self-Service
          SLACK_CHANNEL: notifications-e2e-test-results
          SLACK_ICON_EMOJI: ":test_tube:"
          SLACK_MESSAGE: Cypress reports for TIS Self Service available at https://tis-build-artifacts/${{ github.event.repository.name }}/${{env.workflow}}/${{ github.run_number }}/cypress-reports
          SLACK_FOOTER: It's impossible to be unhappy in a poncho.
          MSG_MINIMAL: true

  deploy-prod:
    runs-on: ubuntu-latest
    environment: prod
    needs: [cypress-e2e]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition-prod.json
          container-name: ${{ github.event.repository.name }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ github.event.repository.name }}
          cluster: trainee-prod
          wait-for-service-stability: true
