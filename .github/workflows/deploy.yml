name: Deploy to Amazon S3

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-preprod:
    name: Deploy to Preprod
    runs-on: ubuntu-latest
    environment: preprod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.0
        with:
          node-version: 18.18.1
          cache: npm

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::430723991443:role/github-actions-deployer-role

      - name: Build React App
        run: npm install && npm run build
        env:
          ENV: preprod

      - name: Get App Version
        run: echo "app_version=$(npm pkg get version | xargs)" >> "$GITHUB_ENV"

      - name: Deploy app build to S3 bucket
        run: |
          mv ./out/[[...app]].html ./out/index.html
          aws s3 sync ./out/ s3://${{ secrets.AWS_S3_BUCKET_PREPROD }}/${{ env.app_version }} --delete

      - name: Update Cloudfront Origin Path
        run: |
          aws cloudfront get-distribution-config --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} > ${{ env.ORIGINAL_CONFIG_FILENAME }}
          etag=`jq '.ETag' ${{ env.ORIGINAL_CONFIG_FILENAME }} | xargs`
          jq '.DistributionConfig | (.Origins.Items[] | select(.Id | contains("website")).OriginPath) = "/${{ env.app_version }}"' ${{ env.ORIGINAL_CONFIG_FILENAME }} > ${{ env.UPDATED_CONFIG_FILENAME }}
          aws cloudfront update-distribution --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --if-match $etag --distribution-config file://${{ env.UPDATED_CONFIG_FILENAME }}
        env:
          ORIGINAL_CONFIG_FILENAME: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID}}_get.json
          UPDATED_CONFIG_FILENAME: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID}}_update.json

  cypress-e2e:
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        browser: [electron, firefox]
        experimental: [true]
        exclude:
          - experimental: true
        include:
          - browser: chrome
            experimental: false
    needs: [deploy-preprod]
    name: Run Cypress E2E tests
    runs-on: ubuntu-latest
    container:
      image: cypress/browsers:node18.6.0-chrome105-ff104
      options: --user 1001

    steps:
      - uses: actions/checkout@v4

      - name: Get workflow
        run: |
          echo "workflow=$(echo ${{ github.workflow }} | sed -e 's/\W/-/g' -e 's/\(.*\)/\L\1/')" >> $GITHUB_ENV

      - name: Cypress run
        uses: cypress-io/github-action@v6
        env:
          CYPRESS_baseUrl: https://stage.trainee.tis.nhs.uk
          CYPRESS_password: ${{ secrets.E2E_TEST_PASS }}
          CYPRESS_username: ${{ secrets.E2E_TEST_USER }}
          CYPRESS_secret: ${{ secrets.E2E_TEST_SECRET }}
          CYPRESS_coverage: false
          NODE_OPTIONS: --max_old_space_size=4096
        with:
          browser: ${{ matrix.browser }}

      - name: Create report artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.browser }}-cypress-reports
          path: cypress/reports

      - name: Create screenshot artifact
        if: failure()
        uses: actions/upload-artifact@v3

        with:
          name: ${{ matrix.browser }}-cypress-screenshots
          path: cypress/screenshots

      - name: Create video artifact
        # Test run video was always captured, so this action uses "always()" condition
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.browser }}-cypress-videos
          path: cypress/videos

      - name: Slack Notify - Test Fails
        if: failure()
        uses: rtCamp/action-slack-notify@v2.2.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: TIS-Self-Service
          SLACK_TITLE: "TISSS E2E TESTS FAILED."
          SLACK_CHANNEL: notifications-e2e-test-results
          SLACK_ICON_EMOJI: ":test_tube_red:"
          SLACK_MESSAGE: Cypress reports for TIS Self-Service tested on ${{ matrix.browser }} available at https://tis-build-artifacts/${{ github.event.repository.name }}/${{env.workflow}}/${{ github.run_number }}/${{ matrix.browser }}-cypress-reports
          SLACK_COLOR: FF0000
          SLACK_FOOTER: I have not failed. I have just found 10,000 ways that won't work.
          MSG_MINIMAL: true

      - name: Slack Notify - Tests Pass
        if: success()
        uses: rtCamp/action-slack-notify@v2.2.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: TIS-Self-Service
          SLACK_TITLE: "TISSS E2E TESTS PASSED."
          SLACK_CHANNEL: notifications-e2e-test-results
          SLACK_ICON_EMOJI: ":test_tube:"
          SLACK_MESSAGE: Cypress reports for TIS Self-Service tested on ${{ matrix.browser }} available at https://tis-build-artifacts/${{ github.event.repository.name }}/${{env.workflow}}/${{ github.run_number }}/${{ matrix.browser }}-cypress-reports
          SLACK_COLOR: 00CC00
          SLACK_FOOTER: It's impossible to be unhappy in a poncho.
          MSG_MINIMAL: true

  backup-artifacts:
    needs: [cypress-e2e]
    name: Backup build artifacts
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          path: build-artifacts

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::430723991443:role/github-actions-deployer-role

      - name: Backup build artifacts
        run: |
          workflow=$(echo ${{ github.workflow }} | sed -e 's/\W/-/g' -e 's/\(.*\)/\L\1/')
          aws s3 sync build-artifacts s3://tis-build-artifacts/${{ github.event.repository.name }}/$workflow/${{ github.run_number }}

  clear-outdated-runs:
    needs: [cypress-e2e]
    uses: health-education-england/.github/.github/workflows/clear-runs.yml@main
    with:
      environment: prod
    secrets:
      reject-pat: ${{ secrets.PAT_REJECT_APPROVALS }}

  deploy-prod:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    environment: prod
    needs: [cypress-e2e]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.0
        with:
          node-version: 18.18.1
          cache: npm

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::430723991443:role/github-actions-deployer-role

      - name: Build React App
        run: npm install && npm run build

      - name: Get App Version
        run: echo "app_version=$(npm pkg get version | xargs)" >> "$GITHUB_ENV"

      - name: Deploy app build to S3 bucket
        run: |
          mv ./out/[[...app]].html ./out/index.html
          aws s3 sync ./out/ s3://${{ secrets.AWS_S3_BUCKET_PROD }}/${{ env.app_version }} --delete

      - name: Update Cloudfront Origin Path
        run: |
          aws cloudfront get-distribution-config --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} > ${{ env.ORIGINAL_CONFIG_FILENAME }}
          etag=`jq '.ETag' ${{ env.ORIGINAL_CONFIG_FILENAME }} | xargs`
          jq '.DistributionConfig | (.Origins.Items[] | select(.Id | contains("website")).OriginPath) = "/${{ env.app_version }}"' ${{ env.ORIGINAL_CONFIG_FILENAME }} > ${{ env.UPDATED_CONFIG_FILENAME }}
          aws cloudfront update-distribution --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --if-match $etag --distribution-config file://${{ env.UPDATED_CONFIG_FILENAME }}
        env:
          ORIGINAL_CONFIG_FILENAME: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID}}_get.json
          UPDATED_CONFIG_FILENAME: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID}}_update.json
